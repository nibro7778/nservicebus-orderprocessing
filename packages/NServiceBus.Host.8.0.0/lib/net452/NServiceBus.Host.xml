<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceBus.Host</name>
    </assembly>
    <members>
        <member name="T:NServiceBus.Hosting.Windows.EndpointType">
            <summary>
                Representation of an Endpoint Type with additional descriptive properties.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Windows.EndpointType.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:NServiceBus.Hosting.Windows.EndpointType" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:NServiceBus.Hosting.Windows.EndpointTypeDeterminer">
            <summary>
                Determines the Endpoint Type by applying conventions.
            </summary>
            <remarks>
                The first eligible Type is returned, checking (in order):
                Args (for windows hosted endpoints)
                Configuration
                Assembly scanning for <see cref="T:NServiceBus.IConfigureThisEndpoint" />
            </remarks>
        </member>
        <member name="M:NServiceBus.Hosting.Windows.EndpointTypeDeterminer.#ctor(NServiceBus.Hosting.Helpers.AssemblyScanner,System.Func{System.String})">
            <summary>
                Initializes a new instance of the <see cref="T:NServiceBus.Hosting.Windows.EndpointTypeDeterminer" /> class.
            </summary>
            <param name="assemblyScanner">The assembly scanner results.</param>
            <param name="getEndpointConfigurationTypeFromConfig">A func to retrieve the endpoint configuration type from config.</param>
            <exception cref="T:System.ArgumentNullException">assemblyScannerResults</exception>
        </member>
        <member name="M:NServiceBus.Hosting.Windows.EndpointTypeDeterminer.GetEndpointConfigurationType">
            <summary>
                Gets the type of the endpoint configuration.
            </summary>
            <exception cref="T:System.InvalidOperationException">No endpoint configuration found in scanned assemblies. </exception>
        </member>
        <member name="T:NServiceBus.Hosting.Windows.Program">
            <summary>
            Entry point to the process.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Windows.HostServiceLocator">
            <summary>
            Plugs into the generic service locator to return an instance of GenericHost"
            </summary>
        </member>
        <member name="F:NServiceBus.Hosting.Windows.HostServiceLocator.Args">
            <summary>
            Command line arguments.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Windows.HostServiceLocator.DoGetInstance(System.Type,System.String)">
            <summary>
            Returns an instance of GenericHost"
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Windows.HostServiceLocator.DoGetAllInstances(System.Type)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Windows.Installers.WindowsInstaller">
            <summary>
            Windows Installer for NService Bus Host
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Windows.Installers.WindowsInstaller.Install(System.String[],System.String)">
            <summary>
            Run installers (infrastructure and per endpoint) and handles profiles.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Windows.Installers.WindowsInstaller.RunInstall">
            <summary>
            Run Install
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Windows.InstallWindowsHost">
            <summary>
            A windows implementation of the NServiceBus hosting solution
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Windows.InstallWindowsHost.#ctor(System.Type,System.String[],System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Accepts the type which will specify the users custom configuration.
            This type should implement <see cref="T:NServiceBus.IConfigureThisEndpoint"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Windows.InstallWindowsHost.Install(System.String)">
            <summary>
            Performs installations
            </summary>
            <param name="username">Username passed in to host.</param>
        </member>
        <member name="T:NServiceBus.Hosting.Windows.WindowsHost">
            <summary>
            A windows implementation of the NServiceBus hosting solution
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Windows.WindowsHost.#ctor(System.Type,System.String[],System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Accepts the type which will specify the users custom configuration.
            This type should implement <see cref="T:NServiceBus.IConfigureThisEndpoint"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Windows.WindowsHost.Start">
            <summary>
            Does startup work.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Windows.WindowsHost.Stop">
            <summary>
            Does shutdown work.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Profiles.IHandleAnyProfile">
            <summary>
            Abstraction for code that will be called that will take dependent action based upon
            the Profile(s) that are active. Useful for implementing special functionality if
            a specific profile is activated, and implementing default functionality otherwise.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Profiles.IHandleProfile`1">
            <summary>
            Generic abstraction for code which will be called when the given profile is active.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Profiles.IHandleProfile">
            <summary>
            Abstraction for code which will be called when the given profile is active.
            Implementors should implement IHandleProfile{T} rather than IHandleProfile.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Profiles.IHandleProfile.ProfileActivated(NServiceBus.EndpointConfiguration)">
            <summary>
            Called when a given profile is activated.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Profiles.ProfileManager">
            <summary>
            Scans and loads profile handlers from the given assemblies
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Profiles.ProfileManager.#ctor(System.Collections.Generic.List{System.Reflection.Assembly},System.String[],System.Collections.Generic.List{System.Type})">
            <summary>
            Initializes the manager with the assemblies to scan and the endpoint configuration to use
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Profiles.ProfileManager.ActivateProfileHandlers(NServiceBus.EndpointConfiguration)">
            <summary>
            Activates the profile handlers that handle the previously identified active profiles. 
            </summary>
        </member>
        <member name="T:NServiceBus.EndpointConfigurationExtensions">
            <summary>
            Extentions for <see cref="T:NServiceBus.EndpointConfiguration"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointConfigurationExtensions.DefineEndpointName(NServiceBus.EndpointConfiguration,System.String)">
            <summary>
            Defines the endpoint name in code thus overriding the previously assigned endpoint name.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="endpointName">The endpoint name to be used.</param>
        </member>
        <member name="T:NServiceBus.EndpointNameAttribute">
            <summary>
            Used to specify the name of the current endpoint.
            Will be used as the name of the input queue as well.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointNameAttribute.#ctor(System.String)">
            <summary>
            Used to specify the name of the current endpoint.
            Will be used as the name of the input queue as well.
            </summary>
        </member>
        <member name="P:NServiceBus.EndpointNameAttribute.Name">
            <summary>
            The name of the endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.GenericHost.Install(System.String)">
            <summary>
            When installing as windows service (/install), run infrastructure installers
            </summary>
        </member>
        <member name="T:NServiceBus.Integration">
            <summary>
            Indicates that infrastructure suitable for integration environments be used.
            </summary>
        </member>
        <member name="T:NServiceBus.IProfile">
            <summary>
            Marker interface to indicate a run-time profile.
            Implementors must be concrete class - interfaces are not supported.
            </summary>
        </member>
        <member name="T:NServiceBus.IWantTheListOfActiveProfiles">
            <summary>
            Implementors will receive the list of active Profiles from the <see cref="T:NServiceBus.Hosting.Profiles.ProfileManager" />. 
            Implementors must implement <see cref="T:NServiceBus.Hosting.Profiles.IHandleProfile"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.IWantTheListOfActiveProfiles.ActiveProfiles">
            <summary>
            ActiveProfiles list will be set by the infrastructure.
            </summary>
        </member>
        <member name="T:NServiceBus.Lite">
            <summary>
            Indicates that the lightest weight infrastructure should be used.
            </summary>
        </member>
        <member name="T:NServiceBus.Production">
            <summary>
            Indicates that the infrastructure should configure itself for production.
            </summary>
        </member>
        <member name="T:NServiceBus.AsA_Client">
            <summary>
            Indicates this endpoint is a client.
            As such will be set up as a non-transactional endpoint with no impersonation and purging messages on startup.
            </summary>
        </member>
        <member name="T:NServiceBus.AsA_Server">
            <summary>
            Indicates this endpoint is a server.
            As such will be set up as a transactional endpoint using impersonation, not purging messages on startup.
            </summary>
        </member>
        <member name="T:NServiceBus.UsingTransport`1">
            <summary>
            Role used to specify the desired transport to use
            </summary>
            <typeparam name="T">The <see cref="T:NServiceBus.Transport.TransportDefinition"/> to use.</typeparam>
        </member>
        <member name="T:NServiceBus.EndpointStartableAndStoppableExtensions">
            <summary>
            Extension methods for EndpointConfiguration
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointStartableAndStoppableExtensions.RunWhenEndpointStartsAndStops(NServiceBus.EndpointConfiguration,NServiceBus.IWantToRunWhenEndpointStartsAndStops)">
            <summary>
            Register a specific instance of an IWantToRunWhenEndpointStartsAndStops implementation
            </summary>
        </member>
        <member name="T:NServiceBus.IWantToRunWhenEndpointStartsAndStops">
            <summary>
            Implementers will be invoked when the endpoint starts up.
            Dependency injection is provided for these types.
            </summary>
        </member>
        <member name="M:NServiceBus.IWantToRunWhenEndpointStartsAndStops.Start(NServiceBus.IMessageSession)">
            <summary>
            Method called at startup.
            </summary>
            <param name="session">Session to access basic message operations at startup. </param>
            <exception cref="T:System.Exception">This exception will be thrown if <code>null</code> is returned. Return a Task or mark the method as <code>async</code>.</exception>
        </member>
        <member name="M:NServiceBus.IWantToRunWhenEndpointStartsAndStops.Stop(NServiceBus.IMessageSession)">
            <summary>
            Method called at shutdown.
            </summary>
            <param name="session">Session to access basic message operations at shutdown. </param>
            <exception cref="T:System.Exception">This exception will be thrown if <code>null</code> is returned. Return a Task or mark the method as <code>async</code>.</exception>
        </member>
    </members>
</doc>
